#!/usr/bin/env ruby

require 'date'

require "rawbotz"
require "rawbotz/option_parser"

optparse = Rawbotz::OptionParser.new do |opts, options|
  opts.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS]"
  opts.separator ""

  opts.on("-f", "--fake VALUE", 'Fake value. If quantity is higher than 0.9*VALUE, subtract VALUE.') do |f|
    options[:fake_value] = f
  end

  opts.on("-d", "--[no-]dry-run",
          "simulate, log potential changes but do not save them") do |d|
    options[:dry_run] = d
  end
end
optparse.parse!
options = optparse.options

include RawgentoModels

def main options
  logger = Logger.new(STDOUT)
  logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

  logger.debug "#{$PROGRAM_NAME} #{Rawbotz::VERSION}"


  RawgentoModels.establish_connection

  begin
    result = RawgentoDB::Query.stock
  rescue Mysql2::Error => e
    logger.error "Problems accessing MySQL database #{e.inspect}"
    exit 2
  end

  now = DateTime.now

  logger.info("Starting stock update")

  result.each do |s|
    product = RawgentoModels::LocalProduct.find_by(product_id: s.product_id)
    if product.nil?
      logger.info("No such product #{s.product_id}")
    else
      qty = s.qty
      if options[:fake_value].to_i > 0 && options[:fake_value].to_i * 0.9 < s.qty.to_i
        qty = qty - options[:fake_value].to_i
        logger.info("Fake value (#{options[:fake_value]}) applies for product_id #{product.product_id}: #{s.qty}")
      end
      if !options[:dry_run]
        product.stock_items.create(qty: qty, date: now)
        logger.info("Updated stock for #{s.product_id}")
      else
        logger.info("(dry run) Found stock for #{s.product_id}")
      end
    end
  end

  logger.info("Finished with stock update")
end

main options

exit 0
