#!/usr/bin/env ruby

require "rawbotz"
require "rawbotz/option_parser"

options = {}
program_name = File.basename __FILE__

optparse = Rawbotz::OptionParser.new do |opts, options|
  opts.banner = "Usage: #{program_name} [OPTIONS]"
  opts.separator ""
end
optparse.parse!

logger = Logger.new(STDOUT)
logger.level = optparse.options[:verbose] ? Logger::DEBUG : Logger::INFO

logger.debug "#{program_name} #{Rawbotz::VERSION}"

logger.info("Fetching and updating local products from MySQL database")

begin
  products = RawgentoDB::Query.products
rescue
  logger.error "Could not connect to MySQL database or other error"
  exit 1
end

product_count = LocalProduct.count

products.each do |p|
  l = RawgentoModels::LocalProduct.find_or_initialize_by(product_id: p.product_id)
  l.save # It does not even have name ...
  logger.info("Ensure product #{p.product_id} exists")
end

def update_attribute attribute_id, attribute_sym, logger
  RawgentoDB::Query.attribute_varchar(attribute_id).each do |product_id, value|
    p = RawgentoModels::LocalProduct.find_or_initialize_by(product_id: product_id)
    p.update({ attribute_sym => value }) # check if changed
    logger.info "Updating #{attribute_sym.to_s} of #{product_id}: #{value}"
  end
end

def update_supplier_from_option attribute_id, logger
  RawgentoDB::Query.attribute_option(attribute_id).each do |product_id, value|
    p = RawgentoModels::LocalProduct.find_or_initialize_by(product_id: product_id)
    supplier = RawgentoModels::Supplier.find_or_create_by(name: value)
    p.update(supplier: supplier)
    logger.info "Updating supplier of #{product_id}: #{value}"
  end
end

name_attribute_id = Rawbotz.attribute_ids["name"]
supplier_attribute_id = Rawbotz.attribute_ids["supplier_name"]
shelve_attribute_id = Rawbotz.attribute_ids["shelve_nr"]
packsize_attribute_id = Rawbotz.attribute_ids["packsize"]

logger.debug "Attribute-ids: Name: #{name_attribute_id}, Supplier: #{supplier_attribute_id}, Shelve-Nr: #{shelve_attribute_id}, Packsize: #{packsize_attribute_id}"

# Name
update_attribute(name_attribute_id, :name, logger)
# Supplier
update_supplier_from_option(supplier_attribute_id, logger)
# Shelve
update_attribute(shelve_attribute_id, :shelve_nr, logger)
# Packsize
update_attribute(packsize_attribute_id, :packsize, logger)

logger.info("Finished updating local products.")

logger.info("Found #{LocalProduct.count - product_count}  new products")

exit 0
