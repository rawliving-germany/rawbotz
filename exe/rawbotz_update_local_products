#!/usr/bin/env ruby

require "rawbotz"
require "rawbotz/option_parser"

require 'action_view'
require 'haml'

optparse = Rawbotz::OptionParser.new do |opts, options|
  opts.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS]"
  opts.separator ""

  opts.on("-m", "--[no-]mail",
          "send mail with result") do |v|
    options[:mail] = v
  end
  opts.on("-d", "--[no-]dry-run",
          "simulate, log potential changes but do not save them") do |d|
    options[:dry_run] = d
  end
end
optparse.parse!
options = optparse.options

logger = Logger.new(STDOUT)
logger.level = optparse.options[:verbose] ? Logger::DEBUG : Logger::INFO

logger.debug "#{$PROGRAM_NAME} #{Rawbotz::VERSION}"

logger.info("Fetching and updating local products from MySQL database")

begin
  products = RawgentoDB::Query.products
rescue
  logger.error "Could not connect to MySQL database or other error"
  logger.error $!.inspect
  # $@ -> backtrace would be available, too
  exit 1
end

product_count = RawgentoModels::LocalProduct.unscoped.count

updater = Rawbotz::Processors::ProductUpdater.new logger
updater.sync(options[:dry_run])

logger.info("Finished updating local products.")

logger.info("Found #{RawgentoModels::LocalProduct.unscoped.count - product_count} new products")

engine = Haml::Engine.new(File.read('lib/rawbotz/views/mail/local_product_changes.haml'))
html_table = engine.render(Object.new, products: updater.local_products)

if options[:mail]
  logger.debug("Sending mail")
  if updater.change_text.present?
    Rawbotz::mail("rawbotz local product update",
                  "Found #{RawgentoModels::LocalProduct.unscoped.count - product_count} new local products\n\nOther changes:\n#{updater.change_text}")
  else
    Rawbotz::mail("rawbotz local product update: no changes", "Nothing changed in magento")
  end
end

exit 0
