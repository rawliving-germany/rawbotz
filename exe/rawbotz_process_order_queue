#!/usr/bin/env ruby

require 'date'

require "rawbotz"
require 'rawbotz/option_parser'

options = {}

optparse = Rawbotz::OptionParser.new do |opts, options|
  opts.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS] ORDER_ID"
  opts.separator ""

  opts.on("-m", "--[no]-mail") do |m|
    options[:mail] = m
  end
end
optparse.parse!
options = optparse.options

include RawgentoModels

def main options
  logger = Logger.new(STDOUT)
  logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

  logger.debug "#{$PROGRAM_NAME} #{Rawbotz::VERSION}"

  logger.info("Checking queue")

  queue = RawgentoModels::Order.queued
  logger.info("-> #{queue.count} orders to process")

  if queue.count == 0
    logger.info("Nothing to do, exiting.")
    exit 0
  end

  order = queue.first

  logger.info("#{order.order_items.length} items in Order")

  if order.state != :new
    logger.warn("Order in state #{order.state}!")
  end
  order.update(state: :processing)

  logger.info ("#{order.order_items.processible.count} products to order.")

  mech = Rawbotz.new_mech

  # check and "merge" cart content
  #logger.debug mech.get_cart_content

  mech.login

  order_processor = Rawbotz::OrderProcessor.new(order, logger)

  order_processor.process! do |item|
    #logger.info("Do something")
  end

  # Check cart content

  #order.update(state: :ordered)

  logger.info("Finished order")

  # send mail
end

main options
exit 0
