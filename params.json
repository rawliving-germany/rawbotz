{
  "name": "rawbotz",
  "tagline": "Magento shop assistant ",
  "body": "# Rawbotz\r\n\r\nRawbotz provides a Web-Interface to do certain management tasks for a particular Magento Web-Shop (RawLiving Germany).\r\n\r\nIn this shop, products are supplied by different suppliers, of which one offers a magento-shop itself.\r\n\r\nRawbotz couples the `rawgento_db`, `rawgento_models` and `magento_remote` gems to make it easy to order items from this particular other shop and provides further functionality, e.g. accessing stock and sales history information.\r\n\r\nNote that this git repository includes software components whose Copyright and License differ from the other parts.\r\n\r\nThese are\r\n- Font Awesome (http://fontawesome.io/) in `lib/rawbotz/public/font-awesome-4.5.0`\r\n- Pure CSS (http://purecss.io) in `lib/rawbotz/public/pure-min.css`\r\n- Chart.JS (http://chartjs.org) in `lib/rawbotz/public/Chart.min.js`\r\n- jquery and jquery-ui (http://jquery.com, http://jqueryui.com) in `lib/rawbotz/public/jquery-2.2.0.min.js` and `lib/rawbotz/public/jui`\r\n\r\nThe copyright and license information is contained in the respective file headers. All other files are Copyright 2016 Felix Wolfsteller and licensed under the AGPLv3 (or any later).\r\n\r\n## Installation\r\n\r\nWhile bundling rawbotz up and installing it as a gem should be possible, it is strongly advised to install it via git.\r\n\r\nNote that the dependencies should be handled with bundler if you are not running a development setup.\r\n\r\nAnyway, the application is so specific to RawLiving Germanys needs that you probably want to get in contact first.\r\n\r\n## Assumptions\r\n\r\n- supplier attribute\r\n- shelve attribute\r\n- packsize attribute\r\n- supplier_sku attribute\r\n- supplier_prod_name attribute\r\n- order_info attribute\r\n- purchase_price attribute\r\n- Ubuntu 14.04 installation, using rvm in an unprivileged users home.\r\n\r\n## Usage\r\n\r\nUntil `rawgento_models`, `rawgento_db` and `magento_remote` (gems by same author) have settled, please adjust the `Gemfile` and checkout these gems in the parent folder.\r\n\r\n### Configuration\r\n\r\nRawbotz combines the configuration files of `rawgento_db`, `rawgento_models` and `magento_remote` in a single file (default: `rawbotz.conf`).  In theory, the components configure themselves using their respective default configuration file paths.\r\n\r\n\r\n#### Unified appraoch\r\n\r\nCreate a `rawbotz.conf` YAML-file with the unified keys needed.  Note that you can pass the path to this configuration file to the various executables in `exe/`.\r\n\r\n    # Rawbotz own database\r\n    default: &default\r\n      adapter: sqlite3\r\n      database: /home/rawbotz/database.sqlite\r\n      encoding: utf8\r\n      pool: 5\r\n      timeout: 5000\r\n    \r\n    development:\r\n      <<: *default\r\n    test:\r\n      <<: *default\r\n      database: db/rawgento_test.db\r\n    \r\n    # Local Magento MySQL database\r\n    host: 127.0.0.1\r\n    port: 3306\r\n    database: magento_shop_dbname\r\n    username: magento_db_username\r\n    password: magento_db_password\r\n    # Attributes needed\r\n    attribute_ids:\r\n      name: 11\r\n      supplier_name: 666\r\n      shelve_nr: 42\r\n      packsize: 1337\r\n      supplier_sku: 1222\r\n      supplier_prod_name: 1921\r\n    \r\n    # Remote Magento Web Interface (for our mech)\r\n    remote_shop:\r\n      base_uri: https://magentoshop.remote\r\n      user: mylogin@email.address\r\n      pass: whatnottobenamed\r\n      form_token: 982103978ab8776F98872Lw\r\n    \r\n    supplier_name: MagentoShop Remote\r\n    \r\n    local_shop:\r\n      base_uri: https://magentoshop.mine\r\n    \r\n    mail:\r\n      to: your@email.address\r\n      from: senders@email.address\r\n      host: email.address\r\n      user: senders@email.user\r\n      pass: senders.email.password\r\n      port: 587\r\n\r\nThen, tell RawbotzApp to eat your config via `exe/rawbotz -c rawbotz.conf`.\r\nTo have fun directly with rack instead use the environment variable `RAWBOTZ_CONFIG`, like in `RAWBOTZ_CONFIG=/home/rawbotz/rawbotz.conf rackup`.\r\n\r\n#### Reference to the configurable required components\r\n\r\nLook in the corresponding gems to check how their configuration has to be done:\r\n\r\n  * [rawgento_db s rawgento_db-config.yml](https://github.com/rawliving-germany/rawgento_db)\r\n  * [rawgento_models s db/config.yml](https://github.com/rawliving-germany/rawgento_models)\r\n  * [magento_remotes config](https://github.com/fwolfst/magento_remote)\r\n\r\n##### In Quick\r\n\r\nConfigure your database in db/config.yml (Rails style, `rawgento_models`).\r\n\r\nConfigure your magento mysql-connection in rawgento_db-config.yml (`rawgento_db`):\r\n    host: myshop.shop\r\n    port: 3306\r\n    database: magento_myshop\r\n    username: magento_myshop_dbuser\r\n    password: magento_myshop_dbpassword\r\n\r\nFinally, configure the remote shops credentials (`magento_remote`)\r\n\r\n## Setup\r\n\r\nNote that a script with basic support for maintenance-tasks is underway (exe/rawbotz_maintenance.sh).\r\n\r\n#### Setup the database\r\n\r\nRun `rake db:setup` (if `db/schema.rb` is present) or `rake db:migrate` to setup the database.\r\nUnfortunately, there is no way to pass in the config file, so for now you have to create `db/config.yml` (which can be nearly the same as `rawbotz.conf`) temporarily.\r\n\r\n#### Populate the database with local and remote products\r\n\r\nE.g. with `bundle exec exe/rawbotz_update_local_products -c rawbotz.conf` .\r\nThis will query your magento MySQL database and create 'local' products, expect the command to run a while (minutes).\r\n\r\nE.g. with `bundle exec exe/rawbotz_update_remote_products -c rawbotz.conf`\r\nThis will query the remote magento shop (scraping it via html GET requests) and create 'remote' products, expect the command to run a while longer (more minutes).  You might need to adapt parameters, depending on the remote shop.  `bundle exec exe/rawbotz_update_remote_products --help` gives you a hint on how to optimize your settings.\r\n\r\n#### Setup mailing\r\n\r\nMails are sent via pony.\r\n\r\nCreate following `rawbotz.conf` section:\r\n\r\n    mail:\r\n      to: your@email.address\r\n      from: senders@email.address\r\n      host: email.address\r\n      user: senders@email.user\r\n      pass: senders.email.password\r\n      port: 587\r\n\r\n.  Multiple receipients can be addressed like this:\r\n\r\n    mail:\r\n      to:\r\n        - your@email.address\r\n        - colleagues@mail.address\r\n.\r\n\r\n## Deployment or web-app startup\r\n\r\nYou can run `(bundle exec) exe/rawbotz`, `rackup` or put rawbotz behind a phusion passenger.\r\nThere is a `-c` option to pass in a config file.\r\n\r\nAs usual, for `rackup` you can specify port (`-p`) and host (`-o`) parameters.  The path to config file has to be exposed as `RAWBOTZ_CONFIG` env var (e.g. `export RAWBOTZ_CONFIG=/path/to/rawbotz.conf`).\r\n\r\n### Stock History Update via cron\r\n\r\nAssuming an Ubuntu Server Setup, run `crontab -e` and add following line to fetch stock values every day at 06:00 am.\r\n\r\n0 6 * * * /path/to/rawbotz_stock_update.sh >> /path/to/rawbotz_stock_update.log\r\n\r\n### Local (Magento MySQL DB) Product Update via cron\r\n\r\nAssuming an Ubuntu Server Setup, run `crontab -e` and add following line to fetch stock values every day at 03:00 am.\r\n\r\n0 3 * * * /path/to/rawbotz_local_product_update.sh >> /path/to/rawbotz_local_product_update.log\r\n\r\n### Picking up Orders\r\n\r\nThe poor mans job scheduler can be implemented by checking every minute for an order that is in the `queued` state (with cron):\r\n\r\n* * * * * /path/to/rawbotz_process_order_queue.sh\r\n\r\n\r\n## Other tools included\r\n\r\n#### rawbotz_update_local_products\r\n\r\nUpdates Products from magento MySQL database.  See `--help` for more information.\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `bin/setup` to install dependencies. You can also run `bin/console` for an interactive prompt that will allow you to experiment. Run `bundle exec rawbotz` to use the gem in this directory, ignoring other installed copies of this gem.\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\r\n\r\nYou can `bundle console` to jump into a pre-setup irb, then call `RawgentoModels::establish_connection \"rawbotz.conf\"` to setup the database connection and deal with real world data.\r\n\r\n### Life cycle of order\r\n\r\nOrders get created as `new` and then go into `queued` or `mailed` state. From every state they can exit into `deleted`.  State changes are done by hand.\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/[USERNAME]/rawbotz. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\r\n\r\nFeel free to get in contact with me.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}