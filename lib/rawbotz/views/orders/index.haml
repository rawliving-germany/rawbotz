= haml "orders/menu".to_sym

%h1 Orders

:javascript
  #{jqui_tab_init}


- if Order.in_state('processing').present?
  - current_processing = Order.in_state("processing").all[0]
  = current_processing.order_items.where("num_ordered > ?", 0).count
  of
  = current_processing.order_items.where("num_wished > ?", 0).count

- if Order.current.present?
  %a(href="/order/#{Order.current.id}")
    Current Order
- else
  %a(href="/order/new") New Order

%br

#tabs
  %ul
    %li
      %a(href="#tab_all_orders") All
    - if @orders.in_state('ordered').present?
      %li
        %a(href="#tab_ordered_orders") Ordered
    - if @orders.in_state('deleted').present?
      %li
        %a(href="#tab_deleted_orders") Deleted
    - Supplier.find_each do |s|
      - if s.orders.count != 0
        %li
          %a(href="#tab_by_supplier_#{s.id}") By Supplier: #{s.name}
  - Supplier.find_each do |s|
    - if s.orders.count != 0
      %div(id="tab_by_supplier_#{s.id}")
        = haml "orders/_order_table".to_sym, locals: {orders: s.orders.where.not(state: 'deleted').order(updated_at: :desc), supplier: s}
        %br
        %br
        %a.pure-button.pure-button-primary(href="/order/non_remote/#{s.id}/new") New Order
  #tab_all_orders
    = haml "orders/_order_table".to_sym, locals: {orders: @orders.where.not(state: 'deleted'), supplier: nil}
  - if @orders.in_state('ordered').present?
    #tab_ordered_orders
      = haml "orders/_order_table".to_sym, locals: {orders: @orders.in_state('ordered'), supplier: nil}
  - if @orders.in_state('deleted').present?
    #tab_deleted_orders
      = haml "orders/_order_table".to_sym, locals: {orders: @orders.in_state('deleted'), supplier: nil}
